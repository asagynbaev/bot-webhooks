// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using bot_webhooks.Data;

namespace bot_webhooks.Migrations
{
    [DbContext(typeof(WebHookContext))]
    partial class WebHookContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("bot_webhooks.Models.BinanceFutureAccountInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("AvailableBalance")
                        .HasColumnType("double precision");

                    b.Property<bool>("CanDeposit")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanTrade")
                        .HasColumnType("boolean");

                    b.Property<bool>("CanWithdraw")
                        .HasColumnType("boolean");

                    b.Property<int>("FeeTier")
                        .HasColumnType("integer");

                    b.Property<double>("MaxWithdrawAmount")
                        .HasColumnType("double precision");

                    b.Property<double>("TotalCrossUnPnl")
                        .HasColumnType("double precision");

                    b.Property<double>("TotalCrossWalletBalance")
                        .HasColumnType("double precision");

                    b.Property<double>("TotalInitialMargin")
                        .HasColumnType("double precision");

                    b.Property<double>("TotalMaintMargin")
                        .HasColumnType("double precision");

                    b.Property<double>("TotalMarginBalance")
                        .HasColumnType("double precision");

                    b.Property<double>("TotalOpenOrderInitialMargin")
                        .HasColumnType("double precision");

                    b.Property<double>("TotalPositionInitialMargin")
                        .HasColumnType("double precision");

                    b.Property<double>("TotalUnrealizedProfit")
                        .HasColumnType("double precision");

                    b.Property<double>("TotalWalletBalance")
                        .HasColumnType("double precision");

                    b.Property<int>("updateTime")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("BinanceFutureAccountInfos");
                });

            modelBuilder.Entity("bot_webhooks.Models.Signal", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Direction")
                        .HasColumnType("integer");

                    b.Property<int>("IsActive")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("SignalType")
                        .HasColumnType("text");

                    b.Property<string>("Symbol")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("signals");
                });

            modelBuilder.Entity("bot_webhooks.Models.Trade", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<decimal>("BoughtPrice")
                        .HasColumnType("numeric");

                    b.Property<decimal>("BuyQuoteCommission")
                        .HasColumnType("numeric");

                    b.Property<int>("Direction")
                        .HasColumnType("integer");

                    b.Property<decimal>("PNL")
                        .HasColumnType("numeric");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<decimal>("SellPrice")
                        .HasColumnType("numeric");

                    b.Property<decimal>("SellUSDTCommission")
                        .HasColumnType("numeric");

                    b.Property<int>("SignalID")
                        .HasColumnType("integer");

                    b.Property<string>("SignalType")
                        .HasColumnType("text");

                    b.Property<string>("Symbol")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("trades");
                });

            modelBuilder.Entity("bot_webhooks.Models.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ApiKey")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<int>("Futures")
                        .HasColumnType("integer");

                    b.Property<int>("IsActive")
                        .HasColumnType("integer");

                    b.Property<string>("Secret")
                        .HasColumnType("text");

                    b.Property<int>("Spot")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.ToTable("users");
                });
#pragma warning restore 612, 618
        }
    }
}
